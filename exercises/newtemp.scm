(define (partial-tree elts n)
  (cond ((= n 0)
	 (display "n is zero")(newline)
	 (display "n is: ")(display n) (newline)
	 (display "elts is: ")(display elts) (newline)
	 (newline)
	 (cons () elts))
	(else (let ((left-size (quotient (- n 1) 2)))
		(display "in partial tree start")(newline)
		(display "n is: ")(display n) (newline)
		(display "elts is: ")(display elts) (newline)
		(display "left-size: ")(display left-size) (newline)
		(newline)
		(let ((left-result (partial-tree elts left-size)))
		  (let ((left-tree (car left-result))
			(non-left-elts (cdr left-result))
			(right-size (- n (+ left-size 1))))
		    (let ((this-entry (car non-left-elts))
			  (right-result (partial-tree
					 (cdr non-left-elts)
					 right-size)))
		      (let ((right-tree (car right-result))
			    (remaining-elts (cdr right-result)))
			(display "left-result: ")(display left-result) (newline)
			(display "right-result: ")(display right-result) (newline)
			(display "left-tree: ")(display left-tree) (newline)
			(display "right-tree: ")(display right-tree) (newline)
			(display "this-entry: ")(display this-entry) (newline)(newline)
			(cons (make-tree
			       this-entry left-tree right-tree)
			      remaining-elts)))))))))
