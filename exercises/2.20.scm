; (load "sequence-operations.scm")
(define (same-parity a . more)
  (define (filter f the-list ans-list)
    (cond ((null? the-list) ans-list)
	  ((f (car the-list))
	   (append (list (car the-list)) (filter f (cdr the-list) ans-list)))
	  (else (filter f (cdr the-list) ans-list))))
  (if (even? a)
      (append (list a) (filter even? more ()))
      (append (list a) (filter odd? more ()))))
; alternative form:
(define (same-parity a . more)
  (define (filter f the-list)
    (cond ((null? the-list) ())
	  ((f (car the-list))
	   (cons (car the-list) (filter f (cdr the-list))))
	  (else (filter f (cdr the-list)))))
  (if (even? a)
      (cons a (filter even? more))
      (cons a (filter odd? more))))
;(same-parity 2 3 4 5 6 7)
;(same-parity 1 2 3 4 5 6 7)
