;; In (eval)..
((let? exp) (let->combination exp env))

;; examples
;;
;;      (let ((first (car clauses))
;;            (rest (cdr clauses)))
;;            body)
;; (let ((first (car clauses)) (rest (cdr clauses))) body)
(define (let? exp) (tagged-list? exp 'let))
;; (let ((var1 (exp 1)) (var2 (exp 2))) body)
;; into->
;; ((lambda (var1 var2)
;;  body) (exp 1) (exp 2))
(define (k-vs exp)
  (let ((forms (cadr exp)))
    (let ((rest (cdr forms)))
      (if (null? rest)
        (car forms)
        (cadr forms)))))
(define (var-list kvs)
  (let ((temp (car kvs)))
    (if (pair? temp)
      (map car kvs)
      (cons temp '()))))
(define (val-list kvs)
  (let ((temp (car kvs)))
    (if (pair? temp)
      (map cadr kvs))
      (cadr kvs)))
(define (let-body exp)
  (caddr exp))
(define (let->combination exp)
  (let ((kvs (k-vs exp)))
    (let ((vars (var-list kvs))
          (vals (val-list kvs)))
    (let ((lmda (make-lambda vars
                 (let-body exp))))
      (list lmda vals)))))
