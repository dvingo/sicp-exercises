(define (enumerate-interval low high)
  (if (> low high)
      ()
      (cons low (enumerate-interval (+ low 1) high))))
(define (unique-pairs n)
  (map (lambda (y)
	 (map (lambda (x) (enumerate-interval y x))
	      (enumerate-interval 1 n)))
       (enumerate-interval 1 n)))


(define 


(map (lambda (i)
       (map (lambda (j) (enumerate-interval 1 (- i 1)))
(i, j)
1 <= j < i <= n
(2, 1)
(3, 1)
(3, 2)
(4, 1)
(4, 2)
(4, 3)
(5, 1)
(5, 2)
(5, 3)
(5, 4)

(define (prime-sum-pairs n)
  (map make-pair-sum
       (filter prime-sum?
	       (flatmap
		(lambda (i)
		  (map (lambda (j) (list i j))
		       (enumerate-interval 1 (- i 1))))
		(enumerate-interval 1 n)))))
