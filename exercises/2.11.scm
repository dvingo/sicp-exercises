; (load "2.7.scm")
(define (mul-interval x y)
  (let ((p1 (* (lower-bound x) (lower-bound y)))
	(p2 (* (lower-bound x) (upper-bound y)))
	(p3 (* (upper-bound x) (lower-bound y)))
	(p4 (* (upper-bound x) (upper-bound y))))
    (make-interval (min p1 p2 p3 p4)
		   (max p1 p2 p3 p4))))

(define (print-mm x y)
  (let ((p1 (* (lower-bound x) (lower-bound y)))
	(p2 (* (lower-bound x) (upper-bound y)))
	(p3 (* (upper-bound x) (lower-bound y)))
	(p4 (* (upper-bound x) (upper-bound y))))
    (display "p1-p4: ")(display ", ")(display p1)
    (display ", ")(display p2)(display ", ")(display  p3)(display ", ") (display p4)))

; (print-mm x y)
; p1-p4: , 2.9899999999999998, 7.54, 7.819999999999999, 19.72

(define a (make-interval -1.3 3.3))
(define b (make-interval  3.2 3.4))
(define (positive? x) (> x 0))
(define (negative? y) (< y 0))
(define (mul-interval-2 x y)
  (let ((ub-x (upper-bound x))
	(lb-x (lower-bound x))
	(ub-y (upper-bound y))
	(lb-y (lower-bound y)))
  (cond ((and (positive? ub-x)
	      (positive? lb-x)
	      (positive? ub-y)
	      (positive? lb-y))
	 (make-interval (* lb-x lb-y) (* ub-x ub-y)))
	((and (positive? ub-x)
	      (positive? lb-x)
	      (positive? ub-y)
	      (negative? lb-y))
	 (make-interval (* lb-x lb-y) (* ub-x ub-y)))
	((and (positive? ub-x)
	      (positive? lb-x)
	      (negative? ub-y)
	      (negative? lb-y))
	 (make-interval (* ub-x lb-y) (* lb-x ub-y)))
	((and (positive? ub-x)
	      (negative? lb-x)
	      (positive? ub-y)
	      (positive? lb-y))
	 (make-interval (* lb-x ub-y) (* ub-x ub-y)))
	((and (positive? ub-x)
	      (negative? lb-x)
	      (positive? ub-y)
	      (negative? lb-y))
	 (make-interval (max (* lb-x ub-y) (* ub-x lb-y))
			(max (* ub-x ub-y) (* lb-x lb-y))))
	((and (positive? ub-x)
	      (negative? lb-x)
	      (negative? ub-y)
	      (negative? lb-y))
	 (make-interval (* ub-x lb-y) (* lb-x lb-y)))
	((and (negative? ub-x)
	      (negative? lb-x)
	      (positive? ub-y)
	      (positive? lb-y))
	 (make-interval (* lb-x ub-y) (* ub-x lb-y)))
	((and (negative? ub-x)
	      (negative? lb-x)
	      (positive? ub-y)
	      (negative? lb-y))
	 (make-interval (* lb-x ub-y) (* lb-x lb-y)))
	((and (negative? ub-x)
	      (negative? lb-x)
	      (negative? ub-y)
	      (negative? lb-y))
	 (make-interval (* ub-x ub-y) (* lb-x lb-y))))))
	

; (mul-interval a b); (-4.42 . 11.2199999999999)
; (mul-interval-2 a b); (-4.42 . 11.2199999999999)
